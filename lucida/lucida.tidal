
do
  -- @name ASTRO
  hush

do
  -- @name intro
  hush
  setcps 0.9
  trbank 100
  all $ (* amp 0.3)
  -- setcps (122/120/2)
  setcps (114/120/2)
  setkey' 0 (-5) "lydian"
  setkey' 1 (-5) "lydian"
  -- once $ qtrigger 0
  --   $ (note . k 0) "~ 6 9 5 . 8 6 4 2 . 0 . ~"
  --   # amp 0.6
  --   # sus "0.2"
  --   # s "loopback" # midichan 13
  bd $ fast 2 "0 ~ ~ 0"
  sd $ fast 2 "~ 0"
  ch $ fast 2 $ "0*4"
  -- d7 $ "[[0 0 ~ 0 0 ~ 0 0 | 0 0 ~ 0 ~ 0 0 ~] . 0 ~ 0 ~ 0 ~ 0 0]"
  d7 $ fast 4 $ cat ["0*4", chop (fast 2 $ irand 4 |* 8) $ degradeBy 0.8 "~ 0"]
  d9 "[~@3 0]*2"
  keys $ fast 2 (note $ k 0 $ "0 ~ ~ -1" |+ "[0,2]") # octave 4 # amp 1 # sus 0.1

do
  -- @name phrase
  lead1 $ fast 2
    $ stack [
      -- midibend $ (slow 8 $ struct "t*128" $ (range 0 8192 $ sine)),
      (note . cat)
      ([ k 0 $ "~ 6 9 5 . 8 6 4 2"
       , k 0 $ "~ 1 ~ [[6, ~@2 3@3,~@3 1@2] | [6, ~ 3@4,~@3 -1@2]]@5"
       , k 0 $ "<[~ 0 ~ [5, ~@2 2@3,~@3 0@2]@5] [~ 2 ~ 4 ~ 5 ~ 6]>"
       ])
    -- # amp 0.2
    # sus 0.3]
    # octave 4

do
  -- @name counter
  setkey' 1 2 "mixolydian"
  lead2 $ fast 2 $ (note . cat)
    ([
      k 0 $ "9 9 ~ ~ ~ 5 6 8",
      k 0 $ "9 9 6 5 8 8 ~ ~",
      k 0 $ "[~ 5 6 8 | ~ [5 6 8]] . 9 9 8 6",
      k 0 $ "8 8 6 5 6 6 5 4",
      k 0 $ "5 4 2 4 -1 0 2 4",
      k 0 $ "7 7 6 7 6 6 5 4",
      -- k 1 $ "5 6 ~ 3 ~ 2 1 -1" |- 4,
      k 0 $ "5 6 ~ 3 ~ 2 1 -1" |- 4,
      k 1 $ "-1 0 1 2 3 4 5 7"
     ])
    # octave 6
    -- # amp 0.9
    |* sus 0.1


do
  -- @name axe
  setkey' 1 2 "mixolydian"
  -- todo: cc decay
  s1 silence
  bd $ "[0 ~@3 . 0]*2" # ccn (tr8sDecayCCArray!!0) # ccv "[0 127]*2"
  d6 $ sometimes (chop "[1@3 2]*4") "0*16" # amp ("6 4 3 6 4 3 6 7 . 3 2 7 3 2 6 2 3" |/ 16)
  sd $ "[~ 0]*2" # amp 0.5
  d7 $ "[[0 0 ~ 0 0 ~ 0 ~ | 0 0 ~ 0 ~ 0 0 ~] . 0 ~ 0 ~ 0 ~ 0 0?]"
  ch $ "0*16"
  bass $ fast 2 $ (note . cat)
    (fmap (k 0) ["0", "0", "-1", "2", "-2", "1"]
    ++ fmap (k 1) ["-1", "0"])
    # amp 0.8
    # octave 3











let withLoopback channel pat = stack [ pat, pat # s "loopback" # midichan channel ]
    mm pat = p "mm" $ withLoopback 11 $ pat # s "mm" # midichan 15
    reface pat = p "reface" $ withLoopback 12 $ pat # s "reface" # midichan 0



-- ArrangementPart
-- newtype Instrument a = P (a -> a)  -- function object
-- mkInstrument :: Num a => [a] -> Instrument a  -- constructor

let mmjump n pat = jumpIn' "mm" n $ pat # s "mm" # midichan 15 # orbit 0
    mm [(t1,p1), (t2,p2)] =
      do
        mmjump (t1 + t2) p2
        mmjump t1 $ qtrigger "mm" p1
    intro num part rest = [(1, part), (num, rest)]
    -- hold num ():rest = 
in mm
  $ intro 1 (nok 0 "[-3 0 2 6]*2" + note "0 12" # sus 0.05)
  $ nok 0 "0 ~@4 0 ~@2"
  # octave 4





-- years later... proper tonality
let applyModality pat = pat # note (root +| scale mode notOrig) # 
                        where root = floor $ get "root" pat
                              mode = floor $ get "note" pat
                              noteOrig = floor $ get "note" pat
    mm pat = p "mm" 
    root = pI "root"
    mode = pS "mode"
    key = grp [root, mode]
in mm
    $ sometimes (# key "0:minor")
    $ note "0 2 4 6"
    # key "2:major"


hush




-- Knobs
import Sound.Tidal.ID (fromID)

let mapShuffle = sometimesBy (cF0 "shuffle_chance") (shuffle $ select (cF0 "shuffle_depth") $ take 6 $ iterate (* 2) 2)
    mapChop = sometimesBy (cF0 "chop_chance") (chop $ select (cF0 "chop_depth") $ take 4 $ iterate (* 2) 2)
    mapAmp idx = (|* amp (cF 1 $ (fromID idx) ++ "_amp"))
    chan idx = p idx . mapAmp idx
    mm pat = chan "mm" $ pat # s "mm" # orbit 0 # midichan 15
    -- mm pat = p "mm" $ pat # s "mm" # orbit 0 # midichan 15
    -- solo = id
    -- p = chan

in

do
  all $ slow 2
  
  
  all $ fast 1
    . mapShuffle
    . mapChop
    . byacc (chop 2 . shuffle "[1 16]*2")


setF "mm_amp" 1

    mm
      $ (stack . fmap (nok 0))
      [ "0*16" |+ irand 8
      , "0~0~~0~0~0~0~~0~" |+ "[0,2,4,6]" |- 7
      ]

setkey' 0 0 "major"

-- apparently fills up the scheduler. try creating a wrapper, and then using to replace the key function
let knobkey = setkey' 0 (select (cF 0.5 "root_knob") $ roots) (select (cF0 "key_knob") $ keys)
                where list = [(0, "major")]
                      roots = fmap pure [-12..12]
                      keys = ["phrygian", "minor", "dorian", "mixolydian", "major", "lydian", "locrian"]




do
  setkey' 0 ("d" - 12) "<dorian dorian minor minor>/2"
  mm $ nok 0 ("[<7 7 5 4>/2 <4 5>/2 <2 3>/2 <0 0 -2 -3>/2]")
  reface $ nok 0 "[<[7 4 2 0]!2 [7 5 3 0]!2 [4 2 0 -2]!2 [3 1 -1 -3]!2>/2]*2"
    -- $ "0" |+ "[[-7,0],<[2,4] [3,5]>]/2"

do
  sd $ stack ["[~ . 0 . ~ 0 ~ ~ . 0]/2" # amp "0.25 0.4", "[~ 0]*4" # amp 0.1]

  hush




lt $ nok 0 "0 <~ 0> <~ 0> 0 ~ ~ 0 ~" # amp 0.5 |+ note "<0 [0@3 -4] -6 [-8 . -10 -5]>/4"

lt $ nok 0 "0 <~ 0> <~ 0> 0 ~ ~ 0 ~" # amp 0.5

mm $ (nok 0 . gs trshuf 0.4) ["0*8", "6 -3 0 1 2 0 4 0", "-3*8" |+ irand 10]
  # sus 0.01
  |+ note "<0 [0@3 -4] -6 [-8 . -10 -5]>/4"

mm $ (nok 0 . gs trshuf 0.4) ["0*8", "6 -3 0 1 2 0 4 0", "-3*8" |+ irand 10]


-- MOVE TO BOOT: functions to control tidal with OSC App + wrapper for doing solos
let slider n = cF0 ("slider" ++ show n)
    gsrange mean dev range = gs mean dev $ fmap pure range
    slidersolo slidera sliderb top = gsrange (slider slidera) (slider sliderb) [0..top]
    bySlider x f = f (slider x)

hush

ht $ degradeBy (slider 3) $ nok 0 ("0*16" |+ slidersolo 1 2 10)

setkey' 0 0 "lydian"


ht $ nok 0 "0*8"

-- bd $ n "0*8" # amp "^slider1"
bd $ degradeBy (slider 4) $ n "0*8" 









-- mamota










-- do
--   g2
--     $ byacc (chop $ fast 14 "[3|2]")
--     <$> (# amp ("[5 4] [5 6] [5 4]!2 [4.3 6 | 5 4] [4.3 4]!2" |/ 11))
--     <$> byshuf (shuffle 14)
--     <$> note
--     <$> [
--       "~@3 0 0 ~ ~ ~ ~@3 0 0 ~",
--       "0@3 ~ ~ ~ 0 0 ~@3 ~ 0 ~",
--       "0!3 ~ ~ 0 ~ ~ 0!3 0? ~ 0"
--    ]
--   hc $ n "0@3 0@3 0@4 0@2 0@2"
--   rs $ n "[[~@2 0!2]!3]@6 ~"
--   setF "synthskip" 0 

--   bd $ n "0 ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ 0 0 ~"
--   sd $ n "0@3 0 ~@4 0@3 0@3"







bass silence 
keys silence


lead2 silence



do
  -- @name final base
  lead1
    $ nok 1 "7 9 11   4 5 7 9   4 5 7 9      3 4 5"
    # amp 0.3

do
  bass
    $ slow 2
    $ note " -1@2 3@2 -6@2 -4 -3@2 1@2 -8@3 . -8"

hush

do
  lead1 silence
  keys silence

do
  keys
    $ note " [-6,-1,3,6]@3 [-6,-2,1,6]@4 [-4,-3,1,4]@4 [-8,-4,-1,3]@3"
    # amp 0.25

hush



do
  -- combined
  setkey' 10 ("7"               |- 1) "major@7 mixolydian@9"
  setkey' 11 ("0@4 2@3 4@4 4@5" |- 1) "minor"
  setkey' 12 ("3 2"             |- 1) "major minor"
  setkey' 13 ("0 . -3 2"        |- 1) "dorian mixolydian"
  lead $ (cat . zipWith nok [10..]) ["[~ 2 0 -3 -1 0 1 ~ 2 ~@2 0@2 2 4 7]", "[~ 11 11 11 9 7 6 6@5 2 4 6 6]", "~ 7 6 2 4 5 6@2 6@4 7 6 5 3"," ~ 5 6 2 4 5 6 5@5 5 6 7 8" |- "0@2 3"]
  setF "refacesus" 0.24
  setF "soloamp" 0
  keys
    $ (# sus "^refacesus")
    $ (# octave 5)
    $ stack 
    $ zipWith (flip (#)) (fmap amp [0.45, 0.5,"^soloamp"])
    $ (cat . zipWith nok [10..])
    <$> [
      Prelude.take 4 $ repeat $ struct "[t@3 ~]@2tff[t@3 ~]@2tftftftft" "[-3,0,2,6]" |- 7
    , Prelude.take 4 $ repeat $ fast 4 $ "0 ~ ~ 0" |+ "<0 -3>" |- 14
    , byshuf (shuffle "[8|16]" . density "[2|4]") <$> ["[~ 2 0 -3 -1 0 1 ~ 2 ~@2 0@2 2 4 7]", "[~ 11 11 11 9 7 6 6@5 2 4 6 6]", "~ 7 6 2 4 5 6@2 6@4 7 6 5 3"," ~ 5 6 2 4 5 6 5@5 2 3 4 5"]
    ]




















---






import System.Directory (getDirectoryContents)

let synthBankDir = "/Library/Audio/Presets/u-he/Diva/MIDI Programs"
    synthBanks = getDirectoryContents "/Library/Audio/Presets/u-he/Diva/MIDI Programs"
in synthBanks

  do str <- synthBanks

    --  mapM_ (putStrLn . (!!0) . reverse . filter ((>= 1) . length) . words) str


getDirectoryContents "/Library/Audio/Presets/u-he/Diva/MIDI Programs"



let a = [".","..","astro_2 keys.h2p","astro_2 lead1.h2p","astro_2 pads.h2p","chroma bass.h2p","Midi.Bank.Cache.txt"]
    b = getDirectoryContents "/Library/Audio/Presets/u-he/Diva/MIDI Programs"
    instruments = ["keys"]
    -- treatName = map reverse . filter ((>= 2) . length) . map words
    -- ignoreDotAndParent = drop 2
    -- treatName = map reverse . filter ((>= 2) . length . fst) . zipWith [0..] . map words . ignoreDotAndParent
    -- treatName = zipWith [0..] . map words . ignoreDotAndParent
    -- setbank (name:bank:rest) = name ++ " " ++ bank
    -- setbank = id
    -- loadbank songname instrument = a
    -- loadbanks songname = map (loadbank songname) ["keys"]
in b
