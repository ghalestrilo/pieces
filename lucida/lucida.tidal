
do
  -- @name ASTRO
  hush

do
  -- @name intro
  hush
  setcps 0.9
  trbank 100
  all id
  setcps (122/120/2)
  setkey' 0 (-5) "lydian"
  setkey' 1 (-5) "lydian"
  -- once $ qtrigger 0
  --   $ (note . k 0) "~ 6 9 5 . 8 6 4 2 . 0 . ~"
  --   # amp 0.6
  --   # sus "0.2"
  --   # s "loopback" # midichan 13
  d1 $ fast 2 "0 ~ ~ 0"
  d2 $ fast 2 "~ 0"
  d8 $ fast 2 $ "0*4"
  -- d7 $ "[[0 0 ~ 0 0 ~ 0 0 | 0 0 ~ 0 ~ 0 0 ~] . 0 ~ 0 ~ 0 ~ 0 0]"
  d7 $ fast 4 $ cat ["0*4", chop (fast 2 $ irand 4 |* 8) $ degradeBy 0.8 "~ 0"]
  d9 "[~@3 0]*2"
  s2 $ fast 2 (note $ k 0 $ "0 ~ ~ -1" |+ "[0,2]") # octave 4 # amp 0.8 # sus 0.1

do
  -- @name phrase
  s1 $ fast 2
    $ stack [
      -- midibend $ (slow 8 $ struct "t*128" $ (range 0 8192 $ sine)),
      (note . cat)
      ([ k 0 $ "~ 6 9 5 . 8 6 4 2"
       , k 0 $ "~ 1 ~ [[6, ~@2 3@3,~@3 1@2] | [6, ~ 3@4,~@3 -1@2]]@5"
       , k 0 $ "<[~ 0 ~ [5, ~@2 2@3,~@3 0@2]@5] [~ 2 ~ 4 ~ 5 ~ 6]>"
       ])
    # amp 0.5
    # sus 2]

do
  -- @name counter
  setkey' 1 2 "mixolydian"
  s4 $ fast 2 $ (note . cat)
    ([
      k 0 $ "9 9 ~ ~ ~ 5 6 8",
      k 0 $ "9 9 6 5 8 8 ~ ~",
      k 0 $ "[~ 5 6 8 | ~ [5 6 8]] . 9 9 8 6",
      k 0 $ "8 8 6 5 6 6 5 4",
      k 0 $ "5 4 2 4 -1 0 2 4",
      k 0 $ "7 7 6 7 6 6 5 4",
      k 1 $ "5 6 ~ 3 ~ 2 1 -1" |- 4,
      k 1 $ "-1 0 1 2 3 4 5 7"
     ])
    # amp 0.9
    |* sus 0.1


do
  -- @name axe
  setkey' 1 2 "mixolydian"
  -- todo: cc decay
  s1 silence
  d1 $ "[0 ~@3 . 0]*2" # ccn (tr8sDecayCCArray!!0) # ccv "[0 127]*2"
  d6 $ sometimes (chop "[1@3 2]*4") "0*16" # amp ("6 4 3 6 4 3 6 7 . 3 2 7 3 2 6 2 3" |/ 16)
  d2 $ "[~ 0]*2" # amp 0.5
  d7 $ "[[0 0 ~ 0 0 ~ 0 ~ | 0 0 ~ 0 ~ 0 0 ~] . 0 ~ 0 ~ 0 ~ 0 0?]"
  d8 $ "0*16"
  s3 $ fast 2 $ (note . cat)
    (fmap (k 0) ["0", "0", "-1", "2", "-2", "1"]
    ++ fmap (k 1) ["-1", "0"])
    # amp 0.8
    # octave 3



setcps (120/120/2)

do
  -- @name ASTRO REPRISE
  hush 

do
  -- @name intro
  hush
  trbank 101
  all $ swingBy (1/12) 8
  setcps (92/120/2)
  setcps (86/120/2)
  setkey' 0 (-6) "lydian"
  setkey' 1 (-1) "lydian"
  setkey' 2 (-2) "mixolydian"

  trm 3 $ trn $ (|+ 12)
    $ fast 2
    $ (cat)
    (fmap (k 0)
      [ "0@5 0 ~@2" |+ 9
      , "0@5 0 ~@2" |+ 9
      , "8@5 7 ~@2"
      , "5@5 4 ~@2"
      , "2"
      , "~"
      , "~"
      , "~"
      ]
    )

    # octave 5

do
  -- @name drums
  d1 $ fast 2 $ "0 ~ . [~ 0 | ~ [~ 0] | ~ 0 ~ ~]"
  d2 $ fast 2 $  "~ 0"
  d8 $ fast 2 $  "0*4" # amp "[0.42 0.33]*2"

do
  -- @name preface
  s1 $ fast 2 $ (note . cat)
    ([ k 2 $ "2 4 5 2 4 0 4 5" |+ 2
    , k 2 $ "2 4 5 2 4 0 1 2" |+ 2
    , k 1 $ "2 3 4 2 3 0 2 4" |+ 2
    , k 1 $ "2 4 5 2 4 0 2 5" |- 2
    ]
    ++ (take 4 $ repeat (k 0 $ "2 4 5 2 4 0 2 5")))
    # octave 5
    # amp 0.6
    # sus 2
    # sustainpedal 1

do
  -- @name bassline
  s3
    $ fast 2
    $ (note . cat)
      ([ k 2 "0 2 4 7"
      , k 2 "0 2 4 7"
      , k 1 "0 2 4 6"
      , k 1 $ "-2 -1 1 4"
      ]
      ++ (take 4 $ repeat (k 0 "0 2 4 6"))
    )
    # octave 3
    # amp 0.8

do
  -- @name drums 2
  d1 $ fast 2 $ "0 ~ . [~ 0 | ~ [~ 0] | ~ 0 ~ ~]"
  d2 $ fast 2 $  "~ 0"
  d8 $ fast 8
    $ sometimes (chop 2) $ "0"
    # amp "<0.42 0.33>"


do
  -- @name bluegrass
  s3
    $ fast 2
    $ (note . cat)
      ([ k 2 "[0 2 4 7, 14@3 13@2 14@3]"
      , k 2 "[0 2 4 7, 14@3 13@2 14@3]"
      , k 1 "[0 2 4 6, 14@3 13@2 14@3]"
      , k 1 $ "-2 -1 1 4"
      ] ++ (take 4 $ repeat (k 0 "0 2 4 6")))
    # octave 3
    # amp 0.8

do
  -- @name hold
  hush
  setF "plink" 0

  trm 2 $ trn $ (k 0) "0(3,8) . ~@2 0@3 0@3"
    
    # octave 3
    # amp 0.7
    # sus 0.1

  s1
    $ fast 2
    $ (note . cat . fmap (+| "0@5 0 ~@2"))
    [ k 0 $ "[-2,0,2,7]" |+ 2
    , k 0 $ "[0,2,5,7]" |+ 2
    , k 0 $ "[0,2,3 4,7 5]" |+ 1
    , k 1 $ "[0,2,5 4,7 6]" |- 5
    ]
    # octave 5
    # amp 0.3

  trm 4 $ trn
    $ fast 2
    -- $ sometimesBy "^plink" (# (octave (5 |+ irand 3) # sus 4))
    -- $ (note . cat . fmap (k 0) . fmap (rarely (|+ ("[1 0@3]*4" |* (irand 8) |- 4))))
    $ (cat . fmap (|+ 2) . fmap (k 0))
    [
      "2 4 5 2 4 0 4 5"
    , "6 8 9 6 8 -4 -2 -1"
    , "1 2 3 1 2 -1 2 5"
    ]

    # sus 1.4
    # amp 0.6

-- do
--   -- @name bassline
--   s3
--     $ fast 2
--     $ (note . cat)
--       ([ k 0 "0 2 4 7"
--       , k 0 "0 2 4 7"
--       , k 1 "0 2 4 6"
--       ]
--     )
--     # octave 3
--     # amp 0.8

do
  -- @name drums
  d1 $ "0 . ~ 0 ~@2"
  d1 $ "[0@3 0]*2"  
  d1 $ "0 ~ ~ 0? ~ ~ 0? ~ . ~ 0 ~ [~ 0]"
  d2 $ "[~ 0]*2"
  d8 $ "0*16"

hush

do
  -- @name full
  setF "plink" 0
  setcps (90/120/2)
  d1 $ "[0@3 0]*2"
  -- d1 $ "0 ~ ~ 0? ~ ~ 0? ~ . ~ 0 ~ [~ 0]"
  d2 $ "[~ 0]*2"
  d8 $ "0*16" # amp "[0.37 0.1]*8"  
  d1 $ "0  ~ ~ 0? ~@4. [~ 0] 0 ~ [~ 0]"
  -- d3 $ fast 2 $ n "~ 0 0 ~"
  lt
    $ fast 2
    $ sometimesBy "^plink" (# (octave (5 |+ irand 3) # sus 4))
    $ (note . cat)
    -- $ (note . cat . fmap (k 0) . fmap (rarely (|+ ("[1 0@3]*4" |* (irand 8) |- 4))))
    (
      fmap (k 0) [
      "2 4 5 [2|-1] 4 0 4 5"
    , "6 8 9 6 8 -4 -2 -1"
    , "1 2 3 1 2 -1 1 2"
    ] ++ fmap (k 1) [
      "[0 1 2 0 1 -2 1 2 | 0 1 2 3 6 5 3 2]"
    ])
    # sus 1.4
    # amp 0.5
  mt
    $ fast 2
    $ (n . cat)
      ([ k 0 "0(3,8)"
      , k 0 "[~@2 0 ~@2 0 ~@2 | [0 ~] [-3 ~] [0 ~] ~]"
      , k 0 $ "0(3,8)" |+ 1
      , k 1 "~@2 0 ~@2 4 ~@2"
      ]
    )
    # midibend "0.1"

    # octave 3
    # sus 0.1
    # amp 0.8

-- EXPERIMENT
-- let trp pat = p "tr"
--                   $  stack [
--                     -- n pat # s "tr" # midichan 2,
--                     n pat # s "loopback" # midichan 2,
--                     ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double)
--                     # stack [s "tr", s "loopback"]
--                     # midinote (tr8sChanArray!!2)
--                     # ccn (tr8sToneCCArray!!2)
--                     # midibend (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double)
--                   ]
-- in
--   do
--     trp
--       $ fast 2
--       $ cat
--         ([ k 0 "0(3,8)"
--         , k 0 "[~@2 0 ~@2 0 ~@2 | [0 ~] [-3 ~] [0 ~] ~]"
--         , k 0 $ "0(3,8)" |+ 1
--         , k 1 "~@2 0 ~@2 4 ~@2"
--         ]
--       )

setcps 1

-- let trpitch pat = p "tr2"
--                   $  stack [
--                     n pat # s "tr" # midichan 3,
--                     n pat # s "loopback" # midichan 2,
--                     ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double)
--                     # stack [s "tr", s "loopback"]
--                     # midinote (tr8sChanArray!!3)
--                     # ccn (tr8sToneCCArray!!3)
--                   ]
-- in
--   trpitch
--       $ fast 2
--       $ cat
--       (
--         fmap (k 0) [
--         "2 4 5 [2|-1] 4 0 4 5"
--       , "6 8 9 6 8 -4 -2 -1"
--       , "1 2 3 1 2 -1 1 2"
--       ] ++ fmap (k 1) [
--         "[0 1 2 0 1 -2 1 2 | 0 1 2 3 6 5 3 2]"
--       ])
--       |+ 12



-- let trp pat = stack [
--                   n pat # s "tr",
--                   n pat # s "loopback" # midichan 0,
--                   (1 <~) $ ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double)
--                   # stack [s "tr", s "loopback"]
--                   # midinote (tr8sChanArray!!5)
--                   # ccn (tr8sToneCCArray!!5)
--                 ]

--     trn pat = [\idx -> ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double) # ccn (tr8sToneCCArray!!idx)]
--     trdecay val pats = pats ++ [\idx -> ccn val # ccv idx]
--     trd = trdecay
-- in 
--   do
--     hush
--     tr 2 $ trn (scale "major" $ run 10)
--     mt $ trp (k 0 $ rev $ run 10)

-- let trm idx pats = p (toID $ "tr8s" ++ show (tr8sToneCCArray!!idx))
--       $ (stack . map (\f -> f idx)) pats
--       # stack [ s "tr" # midichan 9, s "loopback" # midichan 0 ]
--       # midinote (tr8sChanArray!!idx)
--     -- trn pat = [\idx -> n pat, \idx -> ccv (("^delayy" <~) $ fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double) # ccn (tr8sToneCCArray!!idx)]
--     trn pat = [\idx -> ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double) # ccn (tr8sToneCCArray!!idx)]
--     trdecay val pats = pats ++ [\idx -> ccn val # ccv (tr8sDecayCCArray!!idx)]
--     trd = trdecay

-- let trp pat = p "tr3"
--                   $  stack [
--                     n pat # s "tr" # midichan 4,
--                     n pat # s "loopback" # midichan 2,
--                     ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double)
--                     # stack [s "tr", s "loopback"]
--                     # midinote (tr8sChanArray!!4)
--                     # ccn (tr8sToneCCArray!!4)
--                   ]
-- in trp
--     $ (fast 2 . cat)
--     |+ 6

--     # amp 0.4
--     # sus 2

hush

do
  -- @name steal
  hush
  bd $ n "0  ~ ~ 0? ~@4. [~ 0] 0 ~ [~ 0]"
  sd $ n "[~ [0@3 0??]]*2" # amp 0.6
  oh $ sometimes (chop 2) $ degrade (n "0*16") # amp (range 0.01 0.05 $ rand)
  ch $ fast 8 $ n "0*2" # amp "0.1 0.01"
  -- trm 4 $ trn
  mt $ n
     $ (fast 2 . cat)
       [ k 0 $ "~ 6 9 5 . 8 6 4 2"
       , k 0 $ "~ 1 ~ [6, ~@2 3@3,~@3 1@2]@5"
       , k 0 $ "[~ 0 ~ [5, ~@2 2@3,~@3 0@2]@5]"
       , k 1 $ "[~ 0 ~ [5, ~@2 2@3,~@3 -1@2]@5]" |- 4 |+ 7
       , k 0 $ "~ 6 9 5 . 8 6 4 2"
       , k 0 $ "~ 1 ~ [6, ~@2 3@3,~@3 1@2]@5"
       , k 0 $ press $ "2 4 5 6"
       , k 0 $ press $ "2 4 5 6" |+ 7
      ]
  mm $ fast 2
    $ stack [
      -- midibend $ (slow 8 $ struct "t*128" $ (range 0 8192 $ sine)),
      (note . cat)
      ([ k 0 $ "~ 6 9 5 . 8 6 4 2"
       , k 0 $ "~ 1 ~ [6, ~@2 3@3,~@3 1@2]@5"
       , k 0 $ "[~ 0 ~ [5, ~@2 2@3,~@3 0@2]@5]"
       , k 1 $ "[~ 0 ~ [5, ~@2 2@3,~@3 -1@2]@5]" |- 4
       , k 0 $ "~ 6 9 5 . 8 6 4 2"
       , k 0 $ "~ 1 ~ [6, ~@2 3@3,~@3 1@2]@5"
       , k 0 $ press $ "2 4 5 6"
       , k 0 $ press $ "2 4 5 6" |+ 7
       ])
    # amp 0.4
    # sus 2]
  reface
      $ fast 2
      $ n
      $ cat
      (
        fmap (k 0) [
        "2 4 5 [2|-1] 4 0 4 5"
      , "6 8 9 6 8 -4 -2 -1"
      , "1 2 3 1 2 -1 1 2"
      ] ++ fmap (k 1) [
        "[0 1 2 0 1 -2 1 2 | 0 1 2 3 6 5 3 2]"
      ])
      -- |+ 12
  lt
    $ n
    $ fast 2
    $ cat
      ([ k 0 "0(3,8)"
      , k 0 "[~@2 0 ~@2 0 ~@2 | [0 ~] [-3 ~] [0 ~] ~]"
      , k 0 $ "0(3,8)" |+ 1
      , k 1 "~@2 0 ~@2 4 ~@2"
      ]
    )

hush

do
  -- @name end
  d2 silence
  d8 silence 
  setF "plink"  0.3

hush


do
  hush
  rs $ "0*4"


    bd = d1
    sd = d2
    lt = d3
    mt = d4
    ht = d5
    rs = d6
    hc = d7
    ch = d8
    oh = d9
    cc = d10
    rc = d11


sd = tr 1

tr idx pat = p (toID $ "tr8s" ++ show (tr8sToneCCArray!!idx))
      $ pat
      # stack [ s "tr" # midichan 9 # midinote (tr8sChanArray!!idx) , s "loopback" # midichan (pure $ fromIntegral idx) ]

hush


let withLoopback channel pat = stack [ pat, pat # s "loopback" # midichan channel ]
    mm pat = p "mm" $ withLoopback 11 $ pat # s "mm" # midichan 15
    reface pat = p "reface" $ withLoopback 12 $ pat # s "reface" # midichan 0