

-- chunks
let barlens = over 2 [3,6,3,4,3,3,3,3,4]
    nok key = note . k key
    seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)
    seqq = seqchunks barlens
in do
  -- @name sec2
  all $ seqchunks barlens
  -- @name Alvenaria A
  hush 
  trbank 121
  setF "basecps" (118/120)
  setkey' 0 ("g" |+ (slow 2 . slowcat``) [0, -3, -3, 0, -4, -3, 0])  "major"
  bars $ barlens
  ch $ fast 8 $ sometimes (chop $ "<1 [1|2]>") $ "0*4" # amp ("5 3 4 4.5" |/ 10)
  bd $ "0 ~ ~ ~ ~ 0 ~ ~ ~ 0 0 ~ ~ ~ ~ 0 0 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0 ~ ~ ~"
  sd $ "~ ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ ~ [0 ~|~ 0]@2 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0"
  rs $ fast 2 $ "~ 0 ~ 0? 0? ~ 0 0 0 ~ 0 0 0 ~ 0 0"
  rs $ "0 0 0 ~ 0 ~ 0 ~ 0 0 0 ~ 0 ~ 0 0 ~ 0 ~ 0 0 ~ 0 ~ 0 0 ~ 0 ~ 0 0 ~"
  cc $ "[~ ~ 0 ~ ~ ~ ~ ~]*2"
  mt $ "[~ ~ ~ ~ ~ 0 ~ ~]*2"
  -- setseq $ randcat [0,1,2,3]
  setseq $ cat [0,1,2,3,4,5,6,7,8]
  -- s3
  --   $ nok 0 "0 7? 14? 4 ~ 0 ~ 4 ~ ~ -3 ~ ~ [4|-1] ~ 0 0 ~ ~ 4 ~ ~ -3 ~ ~ 4 ~ ~ 0 ~ ~ ~"
  --   # amp 0.7
  --   # octave 2
  s2 $ nok 0 (fast 4 $ struct "tfftfffff" "0@3 0@5" |+ "[-3,0,2,6,9]" |+ (slow 2 . randcat) [0, -3, -3, 0, -4, -3, 0])
    # octave 4 # amp 0.4



bd $ fast 2 "0 ~ <0 ~> ~@4 0"

bd $ fast 2 "0 ~ ~ 0 ~ 0 ~ ~"
sd $ fast 4 "~ . 0 ~@7"

hush

all $ slow 4


let trn pat idx = s (fmap show pat) # n 0
      # ccn (tr8sToneCCArray!!idx)
      # ccv (fmap (fromIntegral . toInteger . floor . (max 0) . (min 127) . (* 64) . (/ 12) . toRational) pat :: Pattern Double) # s "tr"
      -- # ccv ((range 127 0) $ fmap (fromIntegral . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double) # s "tr"
in rc $ trn (fast 8 $ scale "major" $ "0 2 4 7" |+ 7) 0





do
  -- @name alvenaria 2 tema (pife + percussa)
  all $ slow 4
  setkey' 0 "g" "major"
  hush
  ch $ fast 8 $ sometimes (chop $ "<1 [1|2]>") $ "0*4" # amp ("5 3 4 4.5" |/ 10)
  bd $ "0 ~ ~ ~ ~ 0 ~ ~ ~ 0 0 ~ ~ ~ ~ 0 0 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0 ~ ~ ~"
  sd $ "~ ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ ~ [0 ~|~ 0]@2 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0"
  g5 $ fast 2 <$> ["0 ~ ~ 0 ~ ~ ~ ~ ~ ~ 0 0 ~ ~ ~ 0", "~ 0 0 ~ 0 0 ~ ~ 0 0 ~ ~ ~ 0 0 ~"]
  -- g5 $ ["0 ~ ~ 0 ~ ~ ~ ~ ~ ~ 0 0 ~ ~ ~ 0", "~ 0 0 ~ 0 0 ~ ~ 0 0 ~ ~ ~ 0 0 ~"]
  -- setseq $ randcat [0,1,2,3]
  -- s3
  --   $ nok 0 "0 7? 14? 4 ~ 0 ~ 4 ~ ~ -3 ~ ~ [4|-1] ~ 0 0 ~ ~ 4 ~ ~ -3 ~ ~ 4 ~ ~ 0 ~ ~ ~"
  --   # amp 0.7
  --   # octave 2
  
  s2 $ nok 0 (fast 4 $ struct "tfftfffff" "0@3 0@5" |+ "[-3,0,2,6,9]" |+ (slow 2 . slowcat) [0, -3, -3, 0, 0, -4, -3, 0])
    # octave 4 # amp 0.4
  s2 silence
  -- hc $ trn (scale "major" $ (|+ irand 7) $ fast 2 $ stack ["0 ~ ~ 0 ~ ~ ~ ~ ~ ~ 0 0 ~ ~ ~ 0", "~ 0 0 ~ 0 0 ~ ~ 0 0 ~ ~ ~ 0 0 ~"]) 0
  s4 $ (scale "major" $ (|+ irand 7) $ fast 2 $ stack ["0 ~ ~ 0 ~ ~ ~ ~ ~ ~ 0 0 ~ ~ ~ 0", "~ 0 0 ~ 0 0 ~ ~ 0 0 ~ ~ ~ 0 0 ~"])
  s4 $ (scale "mixolydian" $ fast 2 $ "7 4 3 2 ~ 6 4 3 2 -3 -2 0 4 2 ~ ~")
  s4
    $ (scale "mixolydian" $ sometimes (|+ irand 8)
    $ fast 2 $ "7 4 3 2 ~ 2 6 2 5 -3 -2 0 4 2 ~ ~")
    # octave 4

hush

  hc
    (scale "mixolydian" $ fast 2 $ "7 4 3 2 ~ 2 6 2 5 -3 -2 0 4 2 ~ ~")







asap $ s "loopback" # progNum 0 # midichan "[0,1,2,3]" 

asap $ s device # progNum num # midichan chan

let bank' chan device num = asap $ progNum num # s device # midichan chan
    bank = bank' 15
    mcbank num = asap $ progNum num # s "mc" # midichan 15
    fb chan num = bank' chan "fs" num

hush


_translateEventsToMIDICC' modifier array name valueGetter idx pat = ccv (modifier (fmap valueGetter $ filterJust $ M.lookup name <$> pat)) # ccn (array!!idx)
_translateEventsToMIDICC = _translateEventsToMIDICC' id
_noteToTR8STuneCC idx pat = _translateEventsToMIDICC tr8sToneCCArray "note" (ç . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational . nvalue) idx pat
_modwToTR8SCtrlCC = _translateEventsToMIDICC tr8sCtrlCCArray "modwheel" ((* 127) . max 0 . min 1 . fvalue)
_susToTR8SDecayCC = _translateEventsToMIDICC tr8sDecayCCArray "sustain" ((* 127) . max 0 . min 1 . fvalue)


(fmap valueGetter $ filterJust $ M.lookup name <$> pat)


let t = pI "step"
    root = mI "root"
    mode = mS "mode"
    key = grp [root, mode]
in fmap svalue $ filterJust $ M.lookup "mode" <$> key "0:major"

-- Tonality 2.0
let t = pI "step"
    root = mI "root"
    mode = mS "mode"
    key = grp [root, mode]
    -- p = streamReplace tidal
    applykey keydef pat = (# note (scale mode steps |+ root)) $ pat
      where steps = (fmap ivalue $ filterJust $ M.lookup "step" <$> pat)
            root = fmap fromIntegral <$> fmap ivalue $ filterJust $ M.lookup "root" <$> keydef
            mode = fmap svalue $ filterJust $ M.lookup "mode" <$> keydef
    onkey k = applykey (key k)
    dawchan name idx pat = p name
                          $ (cT 0 "dawlatency" <~)
                          $ applykey pat pat
                          # s "loopback"
                          # midichan idx
                          # orbit 0
                              -- where notes = fmap nvalue $ filterJust $ M.lookup "note" <$> pat
                              --       steps = (fmap ivalue $ filterJust $ M.lookup "step" <$> pat)
                              --       root = fmap fromIntegral <$> fmap ivalue $ filterJust $ M.lookup "root" <$> pat
                              --       mode = fmap svalue $ filterJust $ M.lookup "mode" <$> pat
    bass = dawchan "bass" 0
    pads1 = dawchan "pads1" 1
    pads = pads1
    lead1 = dawchan "lead1" 2
    lead2 = dawchan "lead2" 3
    lead = lead1
    mm = lead1
    lt = bass
in
  do
    hush
    -- all $ someCyclesBy 0 $ (onkey . select 0.8) ["2:major"]
    all $ onkey "0:major"
    -- all id
    -- all (# note 0)
    mm
        $ fast 2
        $ t "0 2 4 6"
        # amp 0.3
        # sus 0.1
        # key "0:minor"
    lt
      $ slow 2
      $ t  "0 ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ 0 ~ ~ 0 ~"
      # key "0:minor"
      -- # nok 0 "^bassroot"
      # amp 0.5
      # octave 4


cT0 "time"

n "0" # amp 0

  setF "dawlatency" 0.06
do
  mm $ fast 2
      $ (n . k 0) "<6 6 5 9> 4 2 0"
      # amp 0.3
      -- # sus "1@3 0.6"
      # sus 0.1


    $ (n . k 0) "<6 6 5 9> 4 2 0"
    # amp 0.3
    -- # sus "1@3 0.6"
    # sus 0.1
  lt $ slow 2
    $ nok 0 "0 ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ 0 ~ ~ 0 ~"
    # nok 0 "^bassroot"
    # amp 0.5
    |- note 12