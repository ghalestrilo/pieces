{- INCLUDE
  - Custom commands:
  - bars [...]: define as assinaturas dos compassos usados
  - sq $ pat: define a ordem na qual os compassos de bar sao sequenciados
-}

do
  -- @name Include 1 - Nanan
  -- @setup
  hush
  trbank 118
  setkey' 0 7 "lydian"
  setkey' 1 7 "lydian"
  setcps (112/120/2)
  all id

do
  -- @name chords
  s2
    $ fast 2
    $ cat
      [ (note . k 0) "[[<0!4 -2!4>,4,11]@2 6 7 9 13,]" # sus 5
      , (note . k 0) ("[~ 1 ~ 1@2 ~]" |+ "[0,4,6,8,9]") # sus "0.2 5" # velocity 0.1
      , (note . k 0) "[16 13 15 12 13 15,]" # sus 5
      ]
    # amp (range 0.35 0.5 rand)
    # octave 3

do
  -- hush
  d3 $ "[2 ~ 2 ~ 2 1@2 2 ~ 2 ~ 2 2 ~ 1 ~ 2 2]/1.5" # amp ("[3 4 5]*4" |/ 11)
  d2 $ "[3 ~ 5 ~ 5 3 . 3 ~ 5 5 ~ 3 . 3 ~ 5 ~ 5 3]/1.5" # amp 0.4
  d1 "0*4"
  d4 $ fast 4 $ ( (1/3) <~) "[0!2 ~]"
    # ccn (tr8sToneCCArray!!3)
    #Â ccv "<10 120>"

do
  -- @name bass
  s3
    $ slow 1.5
    $ (note . k 0 . cat)
    [ "0@7 1@2 . 1"
    , "0@7 1@2 . 1"
    , "0@7 1@2 . 1" |- 2
    ]
    # amp 0.6 # octave 3

do
  -- @name curtain
  s2
    $ (note . cat)
      [ k 0 "11 9 7 . 6 5 4"
      , k 0 "3 2 1 . 0 -1 -2"
      , k 0 "-5"
      , "~"
      ]
      # sus 4
  s1
    $ fast 2
    $ (note . cat)
    [ k 0 ("[~ 0 ~ 0@2 ~]" |+ "[0,4,6,8,9,12]")
    , k 0 ("[~ 0 ~ 0@2 ~]" |+ "[0,4,6,8,9,12]")
    , k 0 ("[~ 1 ~ 1@2 ~]" |+ "[0,4,6,8,9]")
    , k 0 ("[~ -2 ~ -2@2 ~]" |+ "[0,4,7,9,13,15]")
    , k 0 ("[~ -5 ~ -5@2 ~]" |+ "[0,4,6,9,13]")
    , k 0 ("[~ -5 ~ -5@2 ~]" |+ "[0,4,6,9,13]")
    , k 0 ("[~ -5 ~ -5@2 ~]" |+ "[0,4,6,9,13]")
    -- , k 0 $ ("[~ 3 ~ 3@2 ~]" |+ "[0,1,3,6,9]")
    , flat 1 $ k 0 $ ("[~ 3 ~ 3@2 ~]" |+ "[0,1,3,6,9]")
    ]
    # octave 3


do
  s1 $ note $ cat
      [ k 0 "11 9 <7!2 6!2>"
      , k 0 "[16 13 15 12 13 15,]"
      ]

do
  -- @name bass pulse
  s3 $ (# octave 1)
    $ (note . k 0)
    $ fast 2
    $ cat
      [ "11 9 <7!2 6!2>"
      , "[16 13 15 12 13 15,]"
      ]

-- ALT: M:C

do
  p "drums" $ stack
    [ n "2 ~ 2 ~ 2 1@2 2 ~ 2 ~ 2" # s "bhh" # gain (range 0.45 0.6 rand)
    , s "[bbd:0,bd:0]*4" # gain 0.8
    ]
  -- drama
  piano
    $ fast 2
    $ cat
    [ t ("[~ 0 ~ 0@2 ~]" |+ "[0,4,6,8,9,12]")
    , t ("[~ 0 ~ 0@2 ~]" |+ "[0,4,6,8,9,12]")
    , t ("[~ 1 ~ 1@2 ~]" |+ "[0,4,6,8,9]")
    , t ("[~ -2 ~ -2@2 ~]" |+ "[0,4,7,9,13,15]")
    , t ("[~ -5 ~ -5@2 ~]" |+ "[0,4,6,9,13]")
    , t ("[~ -5 ~ -5@2 ~]" |+ "[0,4,6,9,13]")
    , t ("[~ -5 ~ -5@2 ~]" |+ "[0,4,6,9,13]")
    -- , t $ sharp 3 $ ("[~ 3 ~ 3@2 ~]" |+ "[-2,0,3,6,9]")
    , note $ flat 1 $ onkey 0 $ ("[~ 3 ~ 3@2 ~]" |+ "[0,1,3,6,9]")
    ]
  mc $
    [ __
    , __
    , __
    , fast 2 $ t . cat . fmap (|- 14) $
      [ "11 9 <7!2 6!2>"
      , "[16 13 15 12 13 15,]"
      ]
    , cat
      [ t "11 9 7 . 6 5 4"
      , t "3 2 1 . 0 -1 -2"
      , t "-5"
      , __
      ]
    ]

















































-- ---------------------------------------------------------------------------------

-- 2 : Krishna

do
  -- @NAME Include 1 - Krishna
  -- funcionou pa caralho
  hush

do
  hush
  setbpm 120
  bars [4, 3, 4]
  setI "__seq__" "<0 1 0 0 1 2>"
  setkey "c" "kumai"
  setkey' 0 "c" "kumai"


  setkey' 1 ("a" |+ slow 2 "0") "minor"
  setkey' 1 ("a" |+ slow 2 "<0!3 -3!3>") "minor"

  trm 2 $ k 1 0

do
  trm 2 $ k 1 0
  trm 2 $ (trn . (|+ 12) .  k 1) $ seqd ["0", "0", "0"]


do
  -- @name II theme
  setkey' 1 ("e") "minor"
  setkey' 2 ("e") "phrygian"
  trm 2 $ (trn . (|+ 12) .  k 1) $ (|+ slow 2 "<0!3 3!3 -3!3>") $ seqd ["0", "0", "0"]
  -- theme
  trm 3
    $ (trn . (|+ 2) .  k 1)
    -- $ sometimes (shuffle "1 4")
    -- $ rarely (|+ "[2|3]*8")
    $ almostNever (fast 2 . (|+ irand 3))
    $ seqd ["7 6 4 [3 6]", press "4 3 1", "4 3 . [-1 0 1 3]"]

mt silence

hush


do
  -- @name III chords down
  all id
  setkey' 3 (slow 6 "<b ef a>") (slow 6 "<phrygian lydian harmonicMinor>")
  setI "bases" (slow 6 "<7 4 7>")
  trm 2 $ (trn . k 3) $ (|+ "^bases") $ 0






  -- @name III chords down
  setkey' 3 "a" "harmonicMinor"
  setI "bases" (slow 1 "0")

hush

  -- theme
  trm 3
    $ (trn . (|+ 2) .  k 3)
    -- $ sometimes press
    $ sometimes (shuffle $ seqd ["1 8", "1 6", "1 8"])
    $ rarely (|+ "[2|3]")
    $ (|+ "^bases")
    $ seqd ["7 6 4 [3 6]", press "4 3 1", "4 3 . [-1 0 1 3]"]
    -- $ segment (seqd [8,6,8]) $ irand 8



let fstack fs pat = stack $ map (\f -> f pat) fs

do
  -- trm 2 $ (trn . (|+ 12) .  k 2) $ (|+ slow 6 "<3 1 -3>") $ seqd ["0", "0", "0"]

do
  all id
  trbank 119
  -- @name test
  -- trs [ ns [0, 0, "0 0 ~ 0", "0@3 0 .~ 0"]
  --   , ns ["~ 0", "~ 0", "~ [~ 0] . 0", "~ 0"]
  --   , ns ["[~ 0!2 ~]*2", "0*3", "0*4", "~ 0!2 ~ . ~@3 ~"]
  --   , rarely (chop 3)  $ ns ["0*4", "0*3", "0*4", "0*4"]
  --   , ns ["0@5 0@3", "~ 0", "0*2", "0*4 . 0"] # t (irand 7 |- 3)
  --   ]
  bd $ ns [0, 0, "0 0 ~ 0", "0@3 0 .~ 0"]
  -- sd $ fstack [w (amp 0.5), density 2 . shuffle 4 . w (amp 0.2)] $ ns ["~ 0", "~ 0", "~ [~ 0] . 0", "~ 0"]
  sd $ ns ["~ 0", "~ 0", "~ [~ 0] . 0", "~ 0"]
  
  ch
    -- $ chdecay (rarely (const "20 120@7") "20")
    -- $ sometimes (chop "2")
    $ ns ["[~ 0!2 ~]*2", "0*3", "0*4", "~ 0!2 ~ . ~@3 ~"]
    
  rs $ rarely (chop 3)  $ ns ["0*4", "0*3", "0*4", "0*4"]
  d4 $ ns ["0@5 0@3", "~ 0", "0*2", "0*4 . 0"] # t (irand 7 |- 3)
  cc $ ns ["0*2", "0 ~ 0", "0*2"]
  trm 10
    $ trn
    $ rarely (fast 3) $ k 0
    $ fast (seqd [4,3,4]) (0 |+ irand 10)


-- # Partes

-- 1. Am -> Am-3

-- 2. 8:09 Tema
-- - Modulear com Musica
-- - MT vira ele

-- - obs pode ter um motivo transitorio?

-- 3. 18:08 harmona sublime
-- - 

-- 4. Harmona Musica Krishna

-- Bm, Eb7M/Bb, AM75+

  rc 

  hush

ch
  $ chdecay (often (const 20) $ (irand 130 |+ 109))
  $ ns ["[~ 0!2 ~]*2", "0*3", "0*4", "~ 0!2 ~ . ~@3 ~"]


trm 8 $ (trm $ k 0 $ seqd ["[~ 0!2 ~]*2", "0*3", "0*4", "~ 0!2 ~ . ~@3 ~"])

do
  -- @name alt
  setseq $ (every 2 . someCyclesBy 0.2) (const 3) $ "<0 1 0 0 1 2>"
  bars [4,3,4,4]


all $ (every 3 . sometimes) (shuffle "2")

do
  -- @name bass
  all id
  setkey' 0 "a" "minor" 
  trm 2 $ (trn . (|+ 2) .  k 0) $ seqd ["0", "-2 4", "0"]

do
  all
    $ rarely (shuffle $ seqd [4, 3, 4])
    . almostNever (chop (irand 4 * 2) . (# amp (range 0.2 0.5 rand)))





























-- ------------------------------------------------- ALVENARIA

-- chunks
let barlens = over 2 [3,6,3,4,3,3,3,3,4]
    nok key = note . k key
    seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)
in do
  -- @name sec2
  all $ seqchunks barlens
  -- @name Alvenaria A
  hush 
  trbank 121
  setF "basecps" (118/120)
  setkey' 0 "f" "mixolydian"
  bars $ barlens
  setseq $ cat [0,1,2,3,4,5,6,7,8]
  ch $ chdecay (almostNever (const 200) $ segment 8 75) $ fast 8 $ sometimes (chop $ "<1 [1|2]>") $ "0*4" # amp ("5 3 4 4.5" |/ 10)
  bd $ "0 ~ ~ ~ ~ 0 ~ ~ ~ 0 0 ~ ~ ~ ~ 0 0 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0 ~ ~ ~"
  sd $ "~ ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ ~ [0 ~|~ 0]@2 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0 ~ ~ ~ ~ ~ 0"
  rs $ fast 2 $ "~ 0 ~ 0? 0? ~ 0 0 0 ~ 0 0 0 ~ 0 0"
  rs $ "0 0 0 ~ 0 ~ 0 ~ 0 0 0 ~ 0 ~ 0 0 ~ 0 ~ 0 0 ~ 0 ~ 0 0 ~ 0 ~ 0 0 ~"
  cc $ "[~ ~ 0 ~ ~ ~ ~ ~]*2"
  rc $ "[~ ~ ~ ~ ~ 0 ~ ~]*2"
  -- setseq $ randcat [0,1,2,3]
  trm 2
    $ (trn . k 0) "0 7? 14? 4 ~ 0 ~ 4 ~ ~ -3 ~ ~ [4|-1] ~ 0 0 ~ ~ 4 ~ ~ -3 ~ ~ 4 ~ ~ 0 ~ ~ ~"
  trm 4
    -- $ (trn . k 0) "[4 2 3 1 ~ ~ ~ ~ . 6 5 3 2 0 0 0 2]*2"
    -- $ (trn . k 0) "7 [0*3]@3 7 0 6 0 5 0 0 0 2 0 4 0"
    -- $ (trn . k 0) $ fast 2 "7 5 7 5 8 6 8 6 . 6 4 6 4 0 4 6 4"
    $ (trn . k 0) $ fast 2 "0 5 7 5 8 6 0 2 . 6 4 6 4 0 5 3 5"


  s2 $ nok 0 ("[0 ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ ~]*2" |+ "[-3,0,2,6]")
    # octave 4 # amp 0.4


let tr idx pat = p (toID $ "tr8s" ++ show (tr8sToneCCArray!!idx))
      $ pat
      # stack [ s "tr" # midichan 9, s "loopback" # midichan 0 ]
      # midinote (tr8sChanArray!!idx)
    ch = tr 7
    chm pat = ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational) pat :: Pattern Double) # ccn (tr8sToneCCArray!!8)
    chdecay decaypat pat = stack [pat, ccv decaypat # ccn (tr8sDecayCCArray!!7)]

hush

setseq $ cat [0, randcat [1, 2, 3, 8, 7]]

let barlens = [3,6,3,4,3,3,3,3,4]
    breaks =  drop 1 . scanl (+) 0 $ barlens
    drumdivision = seqd . breakpoints (over 32 breaks)
in do
  setseq $ "0" |+ irand 9
  setF "brak" 5
  all $ slow 8 . sometimes (chop $ irand "^brak")

do
  -- @name crazy
  setF "brak" 64

do
  -- @name resume
  setF "brak" $ 1 |+ irand 4
  setseq $ cat [0,1,2,3,4,5,6,7,8]

do
  -- @name resume 2
  setF "brak" 128


-- chunks
-- update breakpoints to use chunks (drop 1 . scanl (+) 0)
let barlens = [4, 4, 1]
    nok key = note . k key
    seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)
in do
  -- @name sec2
  hush
  all $ seqchunks barlens
  setseq "<0 1 2>"
  setF "basecps" (118/120)
  bars $ barlens
  ch $ "0 ~ 0 0 0 ~ 0 0   0 0 0 0 0 ~ 0 0 0 0"
  bd $ "0 ~ ~ ~ ~ 0 0 0   0 ~ ~ ~ 0 ~ ~ ~ 0 ~"
  sd $ "~ 0 ~ ~ 0 ~ ~ ~   ~ ~ 0 ~ ~ ~ 0 ~ ~ ~"
  sd $ "0 ~ ~ ~ 0 ~ ~ ~   0 ~ ~ 0 ~ ~ 0 ~ ~ ~"
  rs $ sometimes (chop "^brak") "0 0 0 0 0 0 0 0*2 0 0 0 0 0 0 0 0*2 0 0"
    # amp ("5 4 4.3 4.6 5 4 4.2 4.6  5 4 4.5 5 4 4.5 5 4 4.2 4.6" |/ 13)
  setkey' 0 "g" "melodicMajor"
  -- s2 $ nok 0 ("0 ~@2 0 ~@4 1@3 ~@1 1@2 ~ 3@2 ~" |+ "[-3,0,2,6 7]")
  trm 2 $ (trn . k 0) "0 ~@2 0 ~@2 7@2 3@4 1@4 -3@2"

let barlens = [4, 4, 1]
    seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)
in do
  -- @name hold
  -- @mute all tr, slowly rise bd, ch
  setF "brak" 1
  setF "revv" 0
  setF "skip" 0
  setseq $ "0"
  all $ seqchunks barlens
    . rarely (chop "^brak")
    . sometimesBy "^skip" (# octave (irand 7 |+ 4))
    . sometimesBy "^revv" (rev . fast 8)


let barlens = [4, 4, 1]
    seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)
in do
  -- @name swivel
  -- @mute all tr, slowly rise bd, ch
  setF "brak" $ irand 7 |+ 1
  setF "revv" 0
  setF "skip" 0
  setseq $ someCyclesBy 0.1 (const 2) "0"


let barlens = [4, 4, 1]
    seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)
in do
  -- @name fuck it
  -- @mute all tr, slowly rise bd, ch
  setF "revv" $ slow 16 "<0 0.2>"
  setF "skip" $ slow 16 "<0 0.2>"
  setseq $ someCyclesBy 0.1 (const $ "0" |+ irand 2) "0"


setseq $ cat [0,1,2]


do
  setF "revv" 0
  setF "skip" 0



hush































--- --------------- Mamota

let seqchunks chks = seqd . breakpoints (over (sum chks) . drop 1 . scanl (+) 0 $ chks)
    keys ks = zipWith nok ks


do
  -- @mamota (rua da baixa verde)
  hush
  trbank 123
  setkey' 0 "d" "mixolydian"
  setkey' 1 "d" "minor"
  all $ slow (8*3)
  setF "basecps" (118/120)
  setseq "<0 1 2 3 4>"
  bars $ [2,2,2,2,4]
  all $ slow 2 . seqchunks [2,2,2,2,4]
  trm 10 $ trn $ (|+ 3)
    $ fastcat [
      k 0 "[-3 0 2 7]", k 0 "[-3 0 3 7]",
      k 1 "[-3 1 2 4] ", k 0 "[-3 6 5 4]",
      k 0 "3 4@2 0 ",
      k 0 " [3@2 7@2 | 1 5 3@2]"
    ]
  bd $ fast 3 $ "0 ~ 0 0"
  sd $ fast 3 $ "~@3 0 ~@2 0@2"
  ch $ fast 3 $ "0*8"
  rs $ "0 ~ 0 ~ ~ 0 ~ ~ . ~ 0 ~ ~ ~ 0 ~ ~ . 0 ~ 0 ~ ~ 0 ~ ~"
  hc $ fast 3 $ "~ ~ 0 ~ 0 ~ ~ ~"
  oh $ fast 3 $ "0*4"

do
  -- @name chords
  s1
    $ fastcat [
      nok 0 "[-7,-3,4,7] [-6,1,3,7]",
      fastcat [nok 1 "[0,2,4,7]", nok 0 "[-1,2,6,7]"],
      stack [nok 1 "[-4,2]", nok 0 "[5,7]"]
    ]
    # octave 4

do
  -- @name bass
  trm 9 $ trn
    $ fastcat [
      k 0 "0@3 0", k 0 "1@3 1",
      k 1 "2@3 2", k 0 "4@3 4",
      k 0 "3@3 3",
      k 0 "[7 5 3 4 | -1 0 -1 ~]"
    ]

do
  -- @name mel
  s1 silence 
  s2 silence
  s3 silence
  s4 $ nok 0 "1@2 0 -3   1@2 0 -3   1 0 -3 1 ~ 0@2 -1   -2 -1 0@2  -4 -3 -2@2"
     # octave 6

do
  -- @name stuck
  setseq "0"
  -- setseq $ "0" |+ irand 4
  all $ slow 2 . seqchunks [2,2,2,2,4]
  

do
  setseq $ "0" |+ irand 4
  setkey' 0 ("d" |+ "[0 | -2 | -4 | -5]/4") $ "[mixolydian | minor | harmonicMinor]"
  setkey' 1 ("d" |+ "[0 | -2 | -4 | -5]/4") $ "[mixolydian | minor | harmonicMinor]"


do
  -- @name crazy
  all $ somecyclesBy 0.4 (rev)
        . somecyclesBy 0.2 (shuffle 4)
        . sometimesBy 0.1 (chop "[4 1]" . (# amp 0.4))
        . slow 2
        . seqchunks [2,2,2,2,4]

do
  setkey' 0 ("d" |+ "[0 | -2 | -4]/4") $ "[mixolydian | minor | harmonicMinor]"
  setseq $ randcat [0,1,2,3,4]

do
  -- @name finish
  setseq "<1 2 4>"
  setkey' 0 ("d" |- 1) $ "phrygian"
  setkey' 1 "d" $ "lydian"
  all $ slow 2    
      . somecyclesBy 0.2 rev
      . seqchunks [2,2,2,2,4]




do
  -- mamota 2 (rua do rato)
  hush
  bars [7,7]
  all $ seqchunks [7,7]
  setseq "<0 1>"
  setF "chop" 0
  setN "off" 0
  rc $ "[0 ~]*7"
  ch $ fast 7 $ "0*2" # amp "0.5 0.4"
  lt $ sometimesBy "^chop" (chop $ fast 14 "[3|2]") $ "~@3 0 0 ~ ~ ~ ~@3 0 0 ~"
  mt $ sometimesBy "^chop" (chop $ fast 14 "[3|2]") $ "0@3 ~ ~ ~ 0 0 ~@3 ~ 0 ~"
  ht $ sometimesBy "^chop" (chop $ fast 14 "[3|2]") $ "0!3 ~ ~ 0 ~ ~ 0!3 0? ~ 0"
    # amp ("[5 4] [5 6] [5 4]!2 [4.3 6 | 5 4] [4.3 4]!2" |/ 10)
  hc $ "0@3 0@3 0@4 0@2 0@2"
  rs $ "[[~@2 0!2]!3]@6 ~"
  setF "synthskip" 0 
  setF "s4amp" $ (range 0.42 0.5 rand)
  s4
    -- $ sometimes (chop $ irand 5)
    $ sometimesBy (rev "^synthskip") (chop "[2|4]*7" . (|+ octave "[-1|0|1]*28"))
    $ note "-1? 3 6 -6 -4 -3 1 4 8 6 -8? 3 1 -6?"
    # octave "[6,5]"
    # sus (rarely (const 0.2) 0.05)
    # amp "^s4amp"
  -- bd "~ 0 0 ~ 0*2 0 0 0 ~ 0*2 0 ~ 0 0"
  bd "0 ~ ~ 0 ~ ~ ~ 0 ~ ~ ~ 0 0 ~"
  sd $ "0@3 0 ~@4 0@3 0@3"

do
  -- @name arr
  setF "s4amp" 0
  s1 $ note " 3@2 -1@2 -2@2 -4 1@2 -4@2 -6@3"
  s3 $ note " -1@2 3@2 -6@2 -4 -3@2 1@2 -8@2 -6?" # octave 3

do
  s2 $ note " [-1,3,6]@2 [-1,3]@2 [-6,-2]@2 [-4,-1] [-3,1]@2 [1, 4]@2 [-6,-4,-1,3]@3" # amp 0.48

do
  setF "chop" 0.3

do
  setF "chop" 0.3
  setF "synthskip" 0.1
  setF "s4amp" $ (range 0.42 0.5 rand)
  s3 $ note "-1@3 -6@4 -3@4  -8@2 ~" # octave 3 # amp 1

do
  s3 $ note "-1@3 -6@4 -3@4  -8@2 ~" # octave 3 # amp 1

setF "chop" 0.1

hush

setF "basecps" 1

all $ slow 2
  . sometimesBy 0.1 (fast 8 . (3 octave 7))
  -- . rarely ((chop $ 8) . (|- octave 1))
  . sometimes (shuffle 4)
  . (#Â sus 1)



hush






-- AYLA

do
  -- @name techno vibe
  all $ shuffle 4
  bd
    $ chctrl (fast 2 $ irand 256)
    $ chdecay (fast 5 (irand 130 |+ 109))
    $ "0 0 . ~ 0 ~ ~ 0 ~ ~ ~"
  bd $ "0*4"
  sd $ "~@3 0 . ~ 0 ~ ~ 0 ~ ~ ~"
  ch
    $ chctrl (fast 2 $ irand 256)
    $ chdecay (fast 5 (irand 130 |+ 109))
    $ rarely (chop $ irand 8)
    $ fast 2 $ "0*4 . ~ 0"
  rc
    $ rctone (irand 250)
    $ rcctrl (fast 2 $ irand 256)
    $ rcdecay (fast 5 (irand 130 |+ 109))
    $ n "0*8"



do
  hush
  all $ slow 2
  setcps $ (90/120/2)
  bd
    -- $ bdctrl (fast 2 $ irand 256)
    -- $ bddecay (fast 5 (irand 130 |+ 109))
    $ "0@3 0 . ~ . ~ . ~"
  sd
    -- $ bdctrl (fast 2 $ irand 256)
    -- $ bddecay (fast 5 (irand 130 |+ 109))
    $ fast 2
    $ "~ <0 0?>"
  ch
    $ chctrl (fast 2 $ irand 256)
    $ chdecay (fast 5 (irand 130 |+ 109))
    -- $ rarely (chop $ irand 8)
    $ degrade
    $ fast 2 $ "0*4 . ~ 0"






(head $ trn $ k 0 $ run 10) 0

import Data.Map as M

maybe 0 fvalue <$> M.lookup "note" <$> (note $ k 0 $ run 10)

let pat = (note $ k 0 $ run 10)
in 
  -- ccn 20 # n (maybe 0 nvalue <$> M.lookup "note" <$> pat)
  ccv (fromIntegral <$> floor <$> toRational <$> maybe 0 nvalue <$> M.lookup "note" <$> pat) # ccn 20


let pat = (note $ k 0 $ run 10)
in 
  -- ccn 20 # n (maybe 0 nvalue <$> M.lookup "note" <$> pat)
  ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational . maybe 0 nvalue . M.lookup "note") pat :: Pattern Double) # ccn (tr8sToneCCArray!!0)

hush

let tr idx = p ""


:{
let putTRCC array idx decaypat pat = stack [pat, pat |> ccv decaypat # ccn (array!!idx)]
    tralt = putTRCC tr8sAltChanArray
    trtone = putTRCC tr8sToneCCArray
    trdecay = putTRCC tr8sDecayCCArray
    trctrl = putTRCC tr8sCtrlCCArray
:}

-- TR8S NEW IMPLEMENTATION
let noteToTR8STuneCC idx pat = ccv (fmap (fromIntegral . (`mod` 127) . toInteger . floor . (* 64) . (/ 12) . toRational . maybe 0 nvalue . M.lookup "note") pat) # ccn (tr8sToneCCArray!!idx)
    decayToTR8SDecayCC idx pat = ccv (maybe 0 fvalue <$> M.lookup "decay" <$> pat) # ccn (tr8sDecayCCArray!!idx)
    tr idx pat =
      -- p (toID $ "tr8s" ++ show (tr8sToneCCArray!!idx)) $ 
      stack [
        pat,
        noteToTR8STuneCC idx pat,
        decayToTR8SDecayCC idx pat,
      ]
      # stack [
        s "tr" # midichan 9 # midinote (tr8sChanArray!!idx),
        s "loopback" # midichan (pure $ fromIntegral idx)
      ]
in 
  do
    -- hush
    tr 4 $ nok 0 "0 2 4 7" # decay 1

